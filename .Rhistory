df$shift_start = start_date
df$shift_end = end_date
?ydm_hm
ydm_hm('17may1982 1 p.m.')
ydm_hm('17may1982 1:00pm')
as.POSIXct('17may1982 1 p.m.', format = "%d%b%Y %I %p")
as.POSIXct('17may1982 1 pm', format = "%d%b%Y %I %p")
gsub("p.m.", "pm", "17may1982 1 p.m.")
as.POSIXct("17may1982 1 pm", format = "%d%b%Y %I %p")
start_date = c()
end_date = c()
for (i in 1:length(list_dates)){
starting = list_dates[[i]][1]
finishing = list_dates[[i]][2]
# parse correct time format
starting = gsub("p.m.", "pm", starting)
starting = gsub("a.m.", "am", starting)
finishing = gsub("p.m.", "pm", finishing)
finishing = gsub("a.m.", "am", finishing)
finishing = gsub("noon", "12 pm", finishing)
start_date = c(start_date, starting)
only_date = str_sub(starting, 1, 9) # save only date
end = paste(only_date, finishing, sep = " ")
end_date = c(end_date, end)
}
df$shift_start = start_date
df$shift_end = end_date
df$shift_start = as.POSIXct(start_date, format = "%d%b%Y %I %p")
df$shift_end = as.POSIXct(end_date, format = "%d%b%Y %I %p")
"1982-05-17 14:47:00" > "1982-05-17 13:00:00"
"1982-05-17 14:47:00" < "1982-05-17 13:00:00"
df$ed_tc > df$shift_start
# number of pacient arriving before shift start
sum(df$ed_tc < df$shift_start, na.rm = TRUE)
# number of pacient discharged after shift end
sum(df$dcord_tc > df$shift_end, na.rm = TRUE)
length(df)
nrow(df)
# number of pacient arriving before shift start
pac_arr_before = sum(df$ed_tc < df$shift_start, na.rm = TRUE)
# number of pacient discharged after shift end
pac_disch_after = sum(df$dcord_tc > df$shift_end, na.rm = TRUE)
result_1 = (pac_arr_before + pac_disch_after) / nrow(df)
607/8831
2448/8831
# Question 2
require(reticulate)
pd <- import("pandas")
n
install.packages(reticulate)
install.packages("reticulate")
install.packages("reticulate")
# number of pacient arriving before shift start
pac_arr_before = sum(df$ed_tc < df$shift_start, na.rm = TRUE) / nrow(df)
# number of pacient discharged after shift end
pac_disch_after = sum(df$dcord_tc > df$shift_end, na.rm = TRUE) / nrow(df)
library(data.table)
library(data.table)
# Question 2
dt = data.table(ts = df$ed_tc, datum = df$xb_lntdc)
View(dt)
dt[,mean(datum),by=floor_date(ts,"hour")]
report1 = dt[,mean(datum),by=floor_date(ts,"hour")]
View(report1)
View(dt)
View(report1)
hour("1982-05-17 14:47:00")
# Question 2
dt = data.table(ts = format(df$ed_tc, format = "%H:%M:%S"), datum = df$xb_lntdc)
View(dt)
report1 = dt[,mean(datum),by=floor_date(ts,"hour")]
report1 = dt[,mean(datum),by=floor_date(as.charater(ts),"hour")]
report1 = dt[,mean(datum),by=floor_date(as.character(ts),"hour")]
report1 = dt[,mean(datum),by=floor_date(as.POSIXct(ts),"hour")]
floor_date(ts,"hour")
floor_date(format(df$ed_tc, format = "%H:%M:%S"),"hour")
# Question 2
dt = data.table(ts = format(df$ed_tc, format = "%H:%M:%S"), datum = df$xb_lntdc)
View(dt)
floor(14:47:00)
floor("14:47:00")
floor_date("14:47:00")
report1 = dt[,mean(datum),by=floor_date(as.POSIXct(as.numeric(as.character(ts))),"hour")]
report1 = dt[,mean(datum),by=floor_date(as.POSIXct(as.numeric(as.character(ts)),origin="1970-01-01"),"hour")]
View(dt)
# Question 2
dt = data.table(ts = format(df$ed_tc, format = "%H"), datum = df$xb_lntdc)
View(dt)
dt = data.table(hour_arrived = format(df$ed_tc, format = "%H"), datum = df$xb_lntdc)
report1 = dt %>% group_by(hour_arrived) %>% summarize(severity_by_hour = mean(datum, na.rm = TRUE))
View(report1)
View(report1)
plot(report1$hour_arrived, report1$severity_by_hour, t='l', lty = 3, main = 'Hourly Patterns of Patient Arrivals', ylab = 'Mean Patient Severity', xlab= 'Hour of day')
summary(lm(report1$severity_by_hour ~ report1$severity_by_hour)
)
df$shift_end - df$shift_start
# duration of the shift
df$duration_shift = df$shift_end - df$shift_start
list_dates = str_split(df$shiftid, " to ", n=2)
start_date = c()
end_date = c()
for (i in 1:length(list_dates)){
starting = list_dates[[i]][1]
finishing = list_dates[[i]][2]
# parse correct time format
starting = gsub("p.m.", "pm", starting)
starting = gsub("a.m.", "am", starting)
starting = gsub("noon", "12 pm", starting)
finishing = gsub("p.m.", "pm", finishing)
finishing = gsub("a.m.", "am", finishing)
finishing = gsub("noon", "12 pm", finishing)
start_date = c(start_date, starting)
only_date = str_sub(starting, 1, 9) # save only date
end = paste(only_date, finishing, sep = " ")
end_date = c(end_date, end)
}
df$shift_start = as.POSIXct(start_date, format = "%d%b%Y %I %p")
df$shift_end = as.POSIXct(end_date, format = "%d%b%Y %I %p")
# duration of the shift
df$duration_shift = df$shift_end - df$shift_start
sum(is.na(df$duration_shift))
df$shift_end[1,8]
df$shift_end[1]
df$shift_end[1] + days()
df$shift_end[df$duration_shift<0]
# there are negative durations due to shift spaning midgnight
df$shift_end[df$duration_shift<0] = df$shift_end + days() # add one day to correct negative durations of shifts
# duration of the shift
df$duration_shift = df$shift_end - df$shift_start
start_date = c()
end_date = c()
for (i in 1:length(list_dates)){
starting = list_dates[[i]][1]
finishing = list_dates[[i]][2]
# parse correct time format
starting = gsub("p.m.", "pm", starting)
starting = gsub("a.m.", "am", starting)
starting = gsub("noon", "12 pm", starting)
finishing = gsub("p.m.", "pm", finishing)
finishing = gsub("a.m.", "am", finishing)
finishing = gsub("noon", "12 pm", finishing)
start_date = c(start_date, starting)
only_date = str_sub(starting, 1, 9) # save only date
end = paste(only_date, finishing, sep = " ")
end_date = c(end_date, end)
}
df$shift_start = as.POSIXct(start_date, format = "%d%b%Y %I %p")
df$shift_end = as.POSIXct(end_date, format = "%d%b%Y %I %p")
# duration of the shift
df$duration_shift = df$shift_end - df$shift_start
for (row in 1:nrow(df)){
if (df[row, "duration_shift"]<0){
df[row, "shift_end"] = df[row, "shift_end"] + days()
df[row, "duration_shift"] = df[row, "shift_end"] - df[row, "shift_start"]
} else{
next
}
}
summary(df$duration_shift)
View(report1)
View(dt)
View(dt)
census = data.frame()
View(census)
dt = data.table(df)
dt = data.table(df)
setkey(dt) #set the key to all columns
temp_dt = unique(df[list(shiftid, phys_name), nomatch=0])
temp_dt = unique(dt[list(shiftid, phys_name), nomatch=0])
dt = data.table(df)
setkey(dt) #set the key to all columns
temp_dt = unique(dt[list(shiftid, phys_name), nomatch=0])
temp_dt = unique(dt[list(shiftid, phys_name)])
dt = data.table(df)
setkey(dt) #set the key to all columns
temp_dt = unique(dt[list(shiftid, phys_name)])
temp_dt = unique(dt[list(shiftid, phys_name), nomatch=0])
unique(df$phys_name)
unique_phys = unique(df$phys_name)
unique_phys[1]
unique_phys[2]
length(unique_phys)
phys_shift = df %>% group_by(phys_name, shiftid)
View(phys_shift)
phys_shift = df %>% group_by(phys_name, shiftid) %>% select(phys_name, shiftid)
View(phys_shift)
phys_shift = df %>% distinct(shiftid, phys_name) %>% select(phys_name, shiftid)
View(phys_shift)
phys_shift[1, "phys_name"]
phys_shift[2, "phys_name"]
phys_shift[1, "shiftid"]
tmp_df = df %>% filter(phys_name ==  phys_shift[1, "phys_name"] & shiftid == phys_shift[1, "shiftid"])
View(tmp_df)
View(phys_shift)
phys_shift = df %>% distinct(shiftid, phys_name) %>% select(phys_name, shiftid, dcord_tc, shift_start, shift_end, duration_shift)
phys_shift = df %>% select(phys_name, shiftid, dcord_tc, shift_start, shift_end, duration_shift) %>% distinct(shiftid, phys_name)
View(pd)
View(phys_shift)
phys_shift = df %>% select(phys_name, shiftid, dcord_tc, shift_start, shift_end, duration_shift) %>% distinct(shiftid, phys_name, .keep_all = TRUE)
View(phys_shift)
seq(-9,3,1)
seq(-10,3,1)
for (ind in 1:1){
name = phys_shift[ind, "phys_name"]
id = phys_shift[ind, "shiftid"]
duration = phys_shift[ind, "duration_shift"]
filter_df = df %>% filter(phys_name == name & shiftid == id)
temp_df = phys_shift[row]
temp_df = as.data.frame(lapply(temp_df, rep, (temp_df$duration_shift + 4)))
}
for (ind in 1:2){
name = phys_shift[ind, "phys_name"]
id = phys_shift[ind, "shiftid"]
duration = phys_shift[ind, "duration_shift"]
filter_df = df %>% filter(phys_name == name & shiftid == id)
temp_df = phys_shift[row]
temp_df = as.data.frame(lapply(temp_df, rep, (temp_df$duration_shift + 4)))
}
for (ind in 1:2){
name = phys_shift[ind, "phys_name"]
id = phys_shift[ind, "shiftid"]
duration = phys_shift[ind, "duration_shift"]
filter_df = df %>% filter(phys_name == name & shiftid == id)
temp_df = phys_shift[ind]
temp_df = as.data.frame(lapply(temp_df, rep, (temp_df$duration_shift + 4)))
}
for (ind in 1:2){
name = phys_shift[ind, "phys_name"]
id = phys_shift[ind, "shiftid"]
duration = as.numeric(phys_shift[ind, "duration_shift"]) + 4
filter_df = df %>% filter(phys_name == name & shiftid == id)
temp_df = phys_shift[ind]
temp_df = as.data.frame(lapply(temp_df, rep, duration))
}
View(temp_df)
View(tmp_df)
View(filter_df)
View(tmp_df)
View(temp_df)
phys_shift[1]
phys_shift[1,]
for (ind in 1:2){
name = phys_shift[ind, "phys_name"]
id = phys_shift[ind, "shiftid"]
duration = as.numeric(phys_shift[ind, "duration_shift"]) + 4
filter_df = df %>% filter(phys_name == name & shiftid == id)
temp_df = phys_shift[ind,]
temp_df = as.data.frame(lapply(temp_df, rep, duration))
}
View(temp_df)
View(filter_df)
phys_shift = df %>% select(phys_name, shiftid, shift_start, shift_end, duration_shift) %>% distinct(shiftid, phys_name, .keep_all = TRUE)
for (ind in 1:2){
name = phys_shift[ind, "phys_name"]
id = phys_shift[ind, "shiftid"]
duration = as.numeric(phys_shift[ind, "duration_shift"]) + 4
filter_df = df %>% filter(phys_name == name & shiftid == id)
temp_df = phys_shift[ind,]
temp_df = as.data.frame(lapply(temp_df, rep, duration))
}
rm(tmp_df)
View(temp_df)
View(filter_df)
temp_df$index = NA
temp_df$shift_start[1]
temp_df$shift_start[1] + 1
temp_df$shift_start[1] + hours()
temp_df$shift_start[1] + hours(2)
temp_df$hour = NA
for (row in 1:nrow(temp_df)){
temp_df[row, "hour"] = temp_df[row, "shift_start"] + hours(row)
temp_df[row, "index"] = - (duration + 1) + row
}
for (ind in 1:2){
name = phys_shift[ind, "phys_name"]
id = phys_shift[ind, "shiftid"]
duration = as.numeric(phys_shift[ind, "duration_shift"])
period_study = duration + 4
filter_df = df %>% filter(phys_name == name & shiftid == id)
temp_df = phys_shift[ind,]
temp_df = as.data.frame(lapply(temp_df, rep, period_study))
temp_df$hour = NA
temp_df$index = NA
for (row in 1:nrow(temp_df)){
temp_df[row, "hour"] = temp_df$shift_start[row] + hours(row)
temp_df[row, "index"] = - (duration + 1) + row
}
}
for (ind in 1:2){
name = phys_shift[ind, "phys_name"]
id = phys_shift[ind, "shiftid"]
duration = as.numeric(phys_shift[ind, "duration_shift"])
period_study = duration + 4
filter_df = df %>% filter(phys_name == name & shiftid == id)
temp_df = phys_shift[ind,]
temp_df = as.data.frame(lapply(temp_df, rep, period_study))
temp_df$hour = NA
temp_df$index = NA
for (row in 1:nrow(temp_df)){
temp_df[row, "hour"] = as.POSIXct(temp_df$shift_start[row] + hours(row))
temp_df[row, "index"] = - (duration + 1) + row
}
}
temp_df$shift_start[1]
temp_df$shift_start[1] + hours()
temp_df$shift_start[1] + hours(2)
temp_df$shift_start[1] + hours(5)
temp_df$shift_start[1] + hours(24)
temp_df$hour = NA
temp_df$index = NA
for (row in 1:nrow(temp_df)){
temp_df[row, "hour"] = as.POSIXct(temp_df$shift_start[row] + hours(row))
temp_df[row, "index"] = - (duration + 1) + row
}
str(temp_df)
temp_df$hour = NA
temp_df$index = NA
for (row in 1:nrow(temp_df)){
temp_df[row, "hour"] = as.POSIXct(temp_df$shift_start[row] + hours(row), format = '%d%b%Y %H:%M:%S')
temp_df[row, "index"] = -(duration + 1) + row
}
temp_df$hour = NA
temp_df$index = NA
for (row in 1:nrow(temp_df)){
temp_df[row, "hour"] = format(temp_df$shift_start[row] + hours(row), format = '%H')
temp_df[row, "index"] = -(duration + 1) + row
}
temp_df$hour = NA
temp_df$index = NA
for (row in 1:nrow(temp_df)){
temp_df[row, "hour"] = format(temp_df$shift_start[row] + hours(-1 + row), format = '%H')
temp_df[row, "index"] = -(duration + 1) + row
}
temp_df$hour = NA
temp_df$index = NA
temp_df$census = NA
for (row in 1:nrow(temp_df)){
temp_df[row, "hour"] = format(temp_df$shift_start[row] + hours(-1 + row), format = '%Y-%m-%d %H:%M:%S')
temp_df[row, "index"] = -(duration + 1) + row
}
current_hour = temp_df[1, "hour"]
filter_df %>% filter(dcord_tc < current_hour)
filter_df %>% filter(current_hour < dcord_tc)
filter_df %>% filter(current_hour < dcord_tc) %>% mutate(count = n())
filter_df %>% filter(current_hour < dcord_tc) %>% summarize(count = n())
temp_df$hour = NA
temp_df$index = NA
temp_df$census = NA
for (row in 1:nrow(temp_df)){
temp_df[row, "hour"] = format(temp_df$shift_start[row] + hours(-1 + row), format = '%Y-%m-%d %H:%M:%S')
temp_df[row, "index"] = -(duration + 1) + row
current_hour = temp_df[row, "hour"]
temp_df[row, "census"] = filter_df %>% filter(current_hour < dcord_tc) %>% summarize(count = n())
}
phys_shift = df %>% select(phys_name, shiftid, shift_start, shift_end, duration_shift) %>% distinct(shiftid, phys_name, .keep_all = TRUE)
census_df = data.frame()
for (ind in 1:nrow(phys_shift)){
name = phys_shift[ind, "phys_name"]
id = phys_shift[ind, "shiftid"]
duration = as.numeric(phys_shift[ind, "duration_shift"])
period_study = duration + 4
filter_df = df %>% filter(phys_name == name & shiftid == id)
temp_df = phys_shift[ind,]
temp_df = as.data.frame(lapply(temp_df, rep, period_study))
temp_df$hour = NA
temp_df$index = NA
temp_df$census = NA
for (row in 1:nrow(temp_df)){
temp_df[row, "hour"] = format(temp_df$shift_start[row] + hours(-1 + row), format = '%Y-%m-%d %H:%M:%S')
temp_df[row, "index"] = -(duration + 1) + row
current_hour = temp_df[row, "hour"]
temp_df[row, "census"] = filter_df %>% filter(current_hour < dcord_tc) %>% summarize(count = n())
}
rbind(census_df, temp_df)
}
phys_shift = df %>% select(phys_name, shiftid, shift_start, shift_end, duration_shift) %>% distinct(shiftid, phys_name, .keep_all = TRUE)
for (ind in 1:nrow(phys_shift)){
name = phys_shift[ind, "phys_name"]
id = phys_shift[ind, "shiftid"]
duration = as.numeric(phys_shift[ind, "duration_shift"])
period_study = duration + 4
filter_df = df %>% filter(phys_name == name & shiftid == id)
temp_df = phys_shift[ind,]
temp_df = as.data.frame(lapply(temp_df, rep, period_study))
temp_df$hour = NA
temp_df$index = NA
temp_df$census = NA
for (row in 1:nrow(temp_df)){
temp_df[row, "hour"] = format(temp_df$shift_start[row] + hours(-1 + row), format = '%Y-%m-%d %H:%M:%S')
temp_df[row, "index"] = -(duration + 1) + row
current_hour = temp_df[row, "hour"]
temp_df[row, "census"] = filter_df %>% filter(current_hour < dcord_tc) %>% summarize(count = n())
}
if (ind == 1){
census_df = temp_df
} else{
rbind(census_df, temp_df)
}
}
View(census_df)
View(census_df)
phys_shift = df %>% select(phys_name, shiftid, shift_start, shift_end, duration_shift) %>% distinct(shiftid, phys_name, .keep_all = TRUE)
census_df = NULL
for (ind in 1:nrow(phys_shift)){
name = phys_shift[ind, "phys_name"]
id = phys_shift[ind, "shiftid"]
duration = as.numeric(phys_shift[ind, "duration_shift"])
period_study = duration + 4
# I did two temporal dataframe: filter and temp
# filter refers to all patients that meet a specific shift with a specific physician
# temp refers to a small version of the census for the specific shift and physician above.
filter_df = df %>% filter(phys_name == name & shiftid == id)
temp_df = phys_shift[ind,]
temp_df = as.data.frame(lapply(temp_df, rep, period_study))
temp_df$hour = NA
temp_df$index = NA
temp_df$census = NA
# calculate census for each timestamp of shift and save in temp_df
for (row in 1:nrow(temp_df)){
temp_df[row, "hour"] = format(temp_df$shift_start[row] + hours(-1 + row), format = '%Y-%m-%d %H:%M:%S')
temp_df[row, "index"] = -(duration + 1) + row
current_hour = temp_df[row, "hour"]
temp_df[row, "census"] = filter_df %>% filter(current_hour < dcord_tc) %>% summarize(count = n())
}
# Save data
census_df = rbind(census_df, temp_df)
}
View(census_df)
getwd()
write.csv(census_df, file = 'census.csv')
View(df)
# Question 4
ggplot_df = census_df %>% group_by(phys_name, index) %>% summarize(mean_census = mean(census,na.rm=TRUE))
View(ggplot_df)
ggplot(ggplot_df, aes = (x = index, y=mean_census)) + geom_line(aes(color = phys_name), size = 1) + theme_minimal()
ggplot(ggplot_df, aes = (x = index , y=mean_census)) + geom_line(aes(color = phys_name), size = 1) + theme_minimal()
ggplot(ggplot_df, aes(x = index , y=mean_census)) + geom_line(aes(color = phys_name), size = 1) + theme_minimal()
ggplot(ggplot_df, aes(x = index , y=mean_census)) + geom_line(aes(color = phys_name), size = 1) +
theme_minimal() + xlab("Index") + ylab("Average Census of Patients")
ggplot(ggplot_df, aes(x = index , y=mean_census)) + geom_line(aes(color = phys_name), size = 1) +
theme_minimal() + xlab("Index") + ylab("Average Census of Patients") + ñabs(fill = "Name")
ggplot(ggplot_df, aes(x = index , y=mean_census)) + geom_line(aes(color = phys_name), size = 1) +
theme_minimal() + xlab("Index") + ylab("Average Census of Patients") + labs(fill = "Name")
ggplot(ggplot_df, aes(x = index , y=mean_census)) + geom_line(aes(color = phys_name), size = 1) +
theme_minimal() + xlab("Index") + ylab("Average Census of Patients") + labs(color = "Name")
ggplot(ggplot_df, aes(x = index , y=mean_census)) + geom_line(aes(color = phys_name), size = 1) +
theme_minimal() + xlab("Index") + ylab("Average Census of Patients") + labs(color = "Physician Name")
View(ggplot_df)
View(temp_df)
View(filter_df)
df_reg = df
for (row in 1:2){
arrival_time = df_reg[row, "ed_tc"]
name = df_reg[row, "ed_tc"]
id = df_reg[row, "shiftid"]
temp2_df = census_df %>% filter(phys_name == name & shiftid == id & arrival_time < census_df$hour)
}
View(temp2_df)
for (row in 1:2{
arrival_time = format(df_reg[row, "ed_tc"], format = '%Y-%m-%d %H:%M:%S')
name = df_reg[row, "ed_tc"]
id = df_reg[row, "shiftid"]
temp2_df = census_df %>% filter(phys_name == name & shiftid == id & arrival_time < census_df$hour)
}
for (row in 1:2){
arrival_time = format(df_reg[row, "ed_tc"], format = '%Y-%m-%d %H:%M:%S')
name = df_reg[row, "ed_tc"]
id = df_reg[row, "shiftid"]
temp2_df = census_df %>% filter(phys_name == name & shiftid == id & arrival_time < census_df$hour)
}
for (row in 1:2){
arrival_time = format(df_reg[row, "ed_tc"], format = '%Y-%m-%d %H:%M:%S')
name = df_reg[row, "phys_name"]
id = df_reg[row, "shiftid"]
temp2_df = census_df %>% filter(phys_name == name & shiftid == id & arrival_time < census_df$hour)
}
View(temp2_df)
temp2_df[1, "index"]
temp2_df[1, "census"]
df_reg = df
df_reg$time2shifttime = NA
df_reg$census = NA
for (row in 1:nrow(df_reg)){
arrival_time = format(df_reg[row, "ed_tc"], format = '%Y-%m-%d %H:%M:%S')
name = df_reg[row, "phys_name"]
id = df_reg[row, "shiftid"]
temp2_df = census_df %>% filter(phys_name == name & shiftid == id & arrival_time < census_df$hour)
df_reg[row, "time2shifttime"] = temp2_df[1, "index"]
df_reg[row, "census"] = temp2_df[1, "census"]
}
View(df_reg)
library(stargazer)
# regression
m1 =  lm(formula = xb_lntdc ~ census,  data = df_reg)
reg1 = coeftest(m1, vcovCR(m1, cluster = df_reg$phys_name, type = "CR1S"), cluster = df_reg$phys_name)
m2 =  lm(formula = xb_lntdc ~ census + time2shifttime,  data = df_reg)
reg2 = coeftest(m2, vcovCR(m2, cluster = df_reg$phys_name, type = "CR1S"), cluster = df_reg$phys_name)
stargazer(reg1, reg2, type='text', title = "Which physician appears to be the fastest at discharging patients?", digits = 4 ,
out = "table1.html", column.labels = c('(1)', '(2)'), align=TRUE, no.space=TRUE,
covariate.labels = c('Census','Time 2 End Shift'), dep.var.labels = 'Log Length of Stay')
stargazer(reg1, reg2, type='text', title = "Which physician appears to be the fastest at discharging patients?", digits = 4 ,
out = "table1.html", column.labels = c('OLS', 'OLS'), align=TRUE, no.space=TRUE,
covariate.labels = c('Census','Time 2 End Shift'), dep.var.labels = 'Log Length of Stay')
stargazer(reg1, reg2, type='text', title = "Which physician appears to be the fastest at discharging patients?", digits = 4 ,
column.labels = c('OLS', 'OLS'), align=TRUE, no.space=TRUE,
covariate.labels = c('Census','Time 2 End Shift'), dep.var.labels = 'Log Length of Stay')
stargazer(reg1, reg2, type='text', title = "Which physician appears to be the fastest at discharging patients?", digits = 4 ,
out = "table1.tex", column.labels = c('OLS', 'OLS'), align=TRUE, no.space=TRUE,
covariate.labels = c('Census','Time 2 End Shift'), dep.var.labels = 'Log Length of Stay')
# Summarizing data with skimr
skim(df)
View(census_df)
